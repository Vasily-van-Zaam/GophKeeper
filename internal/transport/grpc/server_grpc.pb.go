// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/transport/grpc/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Grpc_Login_FullMethodName               = "/grpc.server.Grpc/Login"
	Grpc_Registration_FullMethodName        = "/grpc.server.Grpc/Registration"
	Grpc_RegistrationAccept_FullMethodName  = "/grpc.server.Grpc/RegistrationAccept"
	Grpc_ResetPassword_FullMethodName       = "/grpc.server.Grpc/ResetPassword"
	Grpc_ResetPasswordAccepd_FullMethodName = "/grpc.server.Grpc/ResetPasswordAccepd"
	Grpc_CheckChangesData_FullMethodName    = "/grpc.server.Grpc/CheckChangesData"
	Grpc_AddNewData_FullMethodName          = "/grpc.server.Grpc/AddNewData"
	Grpc_GetData_FullMethodName             = "/grpc.server.Grpc/GetData"
)

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	RegistrationAccept(ctx context.Context, in *RegistrationAcceptRequest, opts ...grpc.CallOption) (*RegistrationAcceptResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	ResetPasswordAccepd(ctx context.Context, in *ResetPasswordAccepdRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	CheckChangesData(ctx context.Context, in *CheckChangesDataRequest, opts ...grpc.CallOption) (*CheckChangesDataResponse, error)
	AddNewData(ctx context.Context, in *AddNewDataRequest, opts ...grpc.CallOption) (*AddNewDataResponse, error)
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
}

type grpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcClient(cc grpc.ClientConnInterface) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Grpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, Grpc_Registration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) RegistrationAccept(ctx context.Context, in *RegistrationAcceptRequest, opts ...grpc.CallOption) (*RegistrationAcceptResponse, error) {
	out := new(RegistrationAcceptResponse)
	err := c.cc.Invoke(ctx, Grpc_RegistrationAccept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Grpc_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ResetPasswordAccepd(ctx context.Context, in *ResetPasswordAccepdRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Grpc_ResetPasswordAccepd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) CheckChangesData(ctx context.Context, in *CheckChangesDataRequest, opts ...grpc.CallOption) (*CheckChangesDataResponse, error) {
	out := new(CheckChangesDataResponse)
	err := c.cc.Invoke(ctx, Grpc_CheckChangesData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) AddNewData(ctx context.Context, in *AddNewDataRequest, opts ...grpc.CallOption) (*AddNewDataResponse, error) {
	out := new(AddNewDataResponse)
	err := c.cc.Invoke(ctx, Grpc_AddNewData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, Grpc_GetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServer is the server API for Grpc service.
// All implementations must embed UnimplementedGrpcServer
// for forward compatibility
type GrpcServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	RegistrationAccept(context.Context, *RegistrationAcceptRequest) (*RegistrationAcceptResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	ResetPasswordAccepd(context.Context, *ResetPasswordAccepdRequest) (*ResetPasswordResponse, error)
	CheckChangesData(context.Context, *CheckChangesDataRequest) (*CheckChangesDataResponse, error)
	AddNewData(context.Context, *AddNewDataRequest) (*AddNewDataResponse, error)
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	mustEmbedUnimplementedGrpcServer()
}

// UnimplementedGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServer struct {
}

func (UnimplementedGrpcServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGrpcServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedGrpcServer) RegistrationAccept(context.Context, *RegistrationAcceptRequest) (*RegistrationAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrationAccept not implemented")
}
func (UnimplementedGrpcServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedGrpcServer) ResetPasswordAccepd(context.Context, *ResetPasswordAccepdRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordAccepd not implemented")
}
func (UnimplementedGrpcServer) CheckChangesData(context.Context, *CheckChangesDataRequest) (*CheckChangesDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChangesData not implemented")
}
func (UnimplementedGrpcServer) AddNewData(context.Context, *AddNewDataRequest) (*AddNewDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewData not implemented")
}
func (UnimplementedGrpcServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedGrpcServer) mustEmbedUnimplementedGrpcServer() {}

// UnsafeGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServer will
// result in compilation errors.
type UnsafeGrpcServer interface {
	mustEmbedUnimplementedGrpcServer()
}

func RegisterGrpcServer(s grpc.ServiceRegistrar, srv GrpcServer) {
	s.RegisterService(&Grpc_ServiceDesc, srv)
}

func _Grpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_RegistrationAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).RegistrationAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_RegistrationAccept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).RegistrationAccept(ctx, req.(*RegistrationAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ResetPasswordAccepd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordAccepdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).ResetPasswordAccepd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_ResetPasswordAccepd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).ResetPasswordAccepd(ctx, req.(*ResetPasswordAccepdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_CheckChangesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChangesDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).CheckChangesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_CheckChangesData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).CheckChangesData(ctx, req.(*CheckChangesDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_AddNewData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).AddNewData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_AddNewData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).AddNewData(ctx, req.(*AddNewDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grpc_ServiceDesc is the grpc.ServiceDesc for Grpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.server.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Grpc_Login_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _Grpc_Registration_Handler,
		},
		{
			MethodName: "RegistrationAccept",
			Handler:    _Grpc_RegistrationAccept_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Grpc_ResetPassword_Handler,
		},
		{
			MethodName: "ResetPasswordAccepd",
			Handler:    _Grpc_ResetPasswordAccepd_Handler,
		},
		{
			MethodName: "CheckChangesData",
			Handler:    _Grpc_CheckChangesData_Handler,
		},
		{
			MethodName: "AddNewData",
			Handler:    _Grpc_AddNewData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _Grpc_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/transport/grpc/server.proto",
}
